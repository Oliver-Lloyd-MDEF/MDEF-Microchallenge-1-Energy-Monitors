[
    {
        "id": "dabd4c471f07782f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ad66a41955b1c99d",
        "type": "ui_gauge",
        "z": "dabd4c471f07782f",
        "name": "",
        "group": "d8b3b3e4845b89b6",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Current Consumption chart",
        "label": "watts",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 140,
        "wires": []
    },
    {
        "id": "2448115a460ac43f",
        "type": "ui_text",
        "z": "dabd4c471f07782f",
        "group": "d8b3b3e4845b89b6",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Today's Total Energy Consumption:",
        "format": "{{value}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "bc1b511a5dfe6510",
        "type": "debug",
        "z": "dabd4c471f07782f",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 340,
        "wires": []
    },
    {
        "id": "32be3195618f3b76",
        "type": "http in",
        "z": "dabd4c471f07782f",
        "name": "energy consumption plug",
        "url": "/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "2736961c20a6b57f"
            ]
        ]
    },
    {
        "id": "c5e0d43fed3a1c8b",
        "type": "inject",
        "z": "dabd4c471f07782f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"value\":{\"today_energy\":316,\"total_energy\":2}}",
        "payloadType": "json",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "2736961c20a6b57f"
            ]
        ]
    },
    {
        "id": "95d6cb62e8cedd0f",
        "type": "ui_chart",
        "z": "dabd4c471f07782f",
        "name": "Monthly Consumption",
        "group": "d8b3b3e4845b89b6",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Monthly Consumption",
        "chartType": "line",
        "legend": "false",
        "xformat": "D/M",
        "interpolate": "linear",
        "nodata": "Awaiting Consumption Data",
        "dot": false,
        "ymin": "0",
        "ymax": "2000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "2736961c20a6b57f",
        "type": "split",
        "z": "dabd4c471f07782f",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 310,
        "y": 280,
        "wires": [
            [
                "7c01a44888b8c308"
            ]
        ]
    },
    {
        "id": "7c01a44888b8c308",
        "type": "function",
        "z": "dabd4c471f07782f",
        "name": "function 2",
        "func": "var today_energy = { topic: \"today_energy\", payload: msg.payload.today_energy};\nvar month_energy = { topic: \"month_energy\", payload: msg.payload.month_energy};\nvar today_runtime = { topic: \"today_runtime\", payload: msg.payload.today_runtime};\nvar month_runtime = { topic: \"month_runtime\", payload: msg.payload.month_runtime};\n\nreturn [today_energy, month_energy, today_runtime, month_runtime];",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "bc1b511a5dfe6510",
                "2448115a460ac43f",
                "ad66a41955b1c99d",
                "e69db6e4e3d90626"
            ],
            [
                "95d6cb62e8cedd0f",
                "c1c73ee244422416"
            ],
            [],
            []
        ],
        "outputLabels": [
            "today_energy",
            "month_energy",
            "today_runtime",
            "month_runtime"
        ]
    },
    {
        "id": "c1c73ee244422416",
        "type": "debug",
        "z": "dabd4c471f07782f",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 400,
        "wires": []
    },
    {
        "id": "b45b88b805daaf92",
        "type": "ui_template",
        "z": "dabd4c471f07782f",
        "group": "dd39c849fddb373d",
        "name": "Consumption Visualisation",
        "order": 1,
        "width": "12",
        "height": "12",
        "format": "<iframe style=\"width: 630px; height: 360px; overflow: hidden;\"  scrolling=\"no\" frameborder=\"0\" src=\"https://editor.p5js.org/carlotta.alberta.joana.hylkema/full/_tvl6Z_pT\"></iframe>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 880,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "9c617f064b5a4d3d",
        "type": "function",
        "z": "dabd4c471f07782f",
        "name": "Energy Spike Message Query",
        "func": "// Assuming msg.payload directly contains the 'today_energy' value as a number\n\n// Retrieve the last energy value from the context\nlet lastEnergy = context.get('lastEnergy') || 0;\nlet currentEnergy = msg.payload; // Directly use msg.payload, which is now the today_energy value\n\n// Calculate the difference\nlet difference = currentEnergy - lastEnergy;\n\n// Threshold for what you consider a 'sharp increase'\nlet threshold = 30; // Adjust this value based on your observation\n\nif(difference > threshold) {\n    // Prepare message payload\n    let telegramMsg = {\n        chatId: 6596640884, // Replace with your chat ID\n        type: \"message\",\n        content: \"Hey, I've detected a spike in energy consumption, do you know what that is?\"\n    };\n    \n    // Update the lastEnergy value in the context\n    context.set('lastEnergy', currentEnergy);\n    \n    // Return the message payload to be sent by the Telegram sender node\n    return {payload: telegramMsg};\n} else {\n    // Update the lastEnergy value in the context for the next comparison\n    context.set('lastEnergy', currentEnergy);\n    \n    // No message to send, return null to stop the flow here\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 600,
        "wires": [
            [
                "19159ea04498260c"
            ]
        ]
    },
    {
        "id": "b4acef6fd2958873",
        "type": "telegram receiver",
        "z": "dabd4c471f07782f",
        "name": "",
        "bot": "dc26e3f0a8566d25",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 110,
        "y": 500,
        "wires": [
            [
                "82479c6749be1f34"
            ],
            [
                "82479c6749be1f34"
            ]
        ]
    },
    {
        "id": "6df49356d7f5b3b6",
        "type": "telegram sender",
        "z": "dabd4c471f07782f",
        "name": "",
        "bot": "dc26e3f0a8566d25",
        "haserroroutput": false,
        "outputs": 1,
        "x": 710,
        "y": 480,
        "wires": [
            [
                "07d198ac80da47dd"
            ]
        ]
    },
    {
        "id": "c51e4d48a1c9d987",
        "type": "inject",
        "z": "dabd4c471f07782f",
        "name": "",
        "props": [
            {
                "p": "payload.chatId",
                "v": "6596640884",
                "vt": "num"
            },
            {
                "p": "payload.type",
                "v": "message",
                "vt": "str"
            },
            {
                "p": "payload.content",
                "v": "Hello there!",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "6df49356d7f5b3b6"
            ]
        ]
    },
    {
        "id": "07d198ac80da47dd",
        "type": "debug",
        "z": "dabd4c471f07782f",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 480,
        "wires": []
    },
    {
        "id": "82479c6749be1f34",
        "type": "debug",
        "z": "dabd4c471f07782f",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 500,
        "wires": []
    },
    {
        "id": "19159ea04498260c",
        "type": "debug",
        "z": "dabd4c471f07782f",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 620,
        "wires": []
    },
    {
        "id": "2972cbde752439c0",
        "type": "inject",
        "z": "dabd4c471f07782f",
        "name": "",
        "props": [
            {
                "p": "payload.chatId",
                "v": "6596640884",
                "vt": "num"
            },
            {
                "p": "payload.type",
                "v": "message",
                "vt": "str"
            },
            {
                "p": "payload.content",
                "v": "Hello there!",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "f25dbd054079227d"
            ]
        ]
    },
    {
        "id": "f25dbd054079227d",
        "type": "function",
        "z": "dabd4c471f07782f",
        "name": "Latest consumption data text (TEST)",
        "func": "// Check if today_energy data is available or meaningful\nif (msg.payload === null || msg.payload === undefined || msg.payload === 0) {\n    // Prepare a message indicating no data is available\n    msg.payload = {\n        chatId: \"6596640884\", // Replace with your actual chat ID\n        type: \"message\",\n        content: \"No energy data available yet.\"\n    };\n} else {\n    // If data is available, construct the message with the today_energy value\n    let message = `Current energy usage: Today - ${msg.payload} units`; // Using msg.payload directly\n\n    // Prepare the message payload for Telegram\n    msg.payload = {\n        chatId: \"6596640884\", // Ensure this is your chat ID where you want to send the message\n        type: \"message\",\n        content: message\n    };\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "3f921ca0cbc77c85",
        "type": "telegram command",
        "z": "dabd4c471f07782f",
        "name": "energy consumption request",
        "command": "",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "dc26e3f0a8566d25",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 160,
        "y": 840,
        "wires": [
            [
                "6d0fa36d8c4fa219"
            ],
            [
                "6d0fa36d8c4fa219"
            ]
        ]
    },
    {
        "id": "910c1d9de4536084",
        "type": "function",
        "z": "dabd4c471f07782f",
        "name": "Energyconsumptionmessage",
        "func": "// Check if today_energy data is available or meaningful\nif (msg.payload === null || msg.payload === undefined || msg.payload === 0) {\n    // Prepare a message indicating no data is available\n    msg.payload = {\n        chatId: \"6596640884\", // Replace with your actual chat ID\n        type: \"message\",\n        content: \"No energy data available yet.\"\n    };\n\n} else {\n    // If data is available, construct the message with the today_energy value\n    let message = `Hey! You are currently using: ${msg.payload} watts`; // Using msg.payload directly\n\n    // Prepare the message payload for Telegram\n    msg.payload = {\n        chatId: \"6596640884\", // Ensure this is your chat ID where you want to send the message\n        type: \"message\",\n        content: message\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 840,
        "wires": [
            [
                "6df49356d7f5b3b6"
            ]
        ]
    },
    {
        "id": "47ae975f5b9d99c3",
        "type": "switch",
        "z": "dabd4c471f07782f",
        "name": "Check Text Message",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 840,
        "wires": [
            [
                "e69db6e4e3d90626"
            ],
            []
        ]
    },
    {
        "id": "6d0fa36d8c4fa219",
        "type": "function",
        "z": "dabd4c471f07782f",
        "name": "Check Text Message",
        "func": "// Convert the incoming message to lowercase and trim spaces\nconst incomingMessage = msg.payload.content.toLowerCase().trim();\n\n// Check if the message matches the query\nif(incomingMessage === \"what is my energy usage?\") {\n    // Proceed to fetch and send the energy data\n    return true;\n    // Add a delay before returning false\n} else {\n    // Stop the flow if the message does not match\n    return false;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 900,
        "wires": [
            [
                "47ae975f5b9d99c3"
            ]
        ]
    },
    {
        "id": "e69db6e4e3d90626",
        "type": "join",
        "z": "dabd4c471f07782f",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 650,
        "y": 780,
        "wires": [
            [
                "910c1d9de4536084",
                "19159ea04498260c"
            ]
        ]
    },
    {
        "id": "c7fcd51c054e7642",
        "type": "ui_spacer",
        "z": "dabd4c471f07782f",
        "name": "spacer",
        "group": "d8b3b3e4845b89b6",
        "order": 3,
        "width": 12,
        "height": 1
    },
    {
        "id": "d8b3b3e4845b89b6",
        "type": "ui_group",
        "name": "Energy Dashboard Test",
        "tab": "e2ce89c9b93a2cc2",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "dd39c849fddb373d",
        "type": "ui_group",
        "name": "Visualiser",
        "tab": "e2ce89c9b93a2cc2",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dc26e3f0a8566d25",
        "type": "telegram bot",
        "botname": "EnergyDan_bot",
        "usernames": "",
        "chatids": "-4137212798",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "e2ce89c9b93a2cc2",
        "type": "ui_tab",
        "name": "Friendly Neighbourhood Energy Tracker",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]